#!/bin/bash
# this preview script is originally based off of rangers scope.sh
# unlike ranger, fuf expects the preview script to handle everything
# its also expected to be executed within the directory of the file
# from generating text previews to rendering the images within the terminal

# Meaningful aliases for arguments:
width="$2"  # Width of the preview pane (number of fitting characters)
height="$3" # Height of the preview pane (number of fitting characters)
cached="$(echo ~)/.thumbnails/$1" # location used to cache image previews

# preview img position/size config, this changes for each font and terminal
# you will have to tweak this
offset_w=27
offset_h=10
max_w=$((width*7-5))
max_h=$((height*13))

# fileinfo
mimetype=$(file --mime-type -Lb "$1")
extension=$(/bin/echo "${1##*.}" | awk '{print tolower($0)}')

# functions
has() { type $1 &> /dev/null; }              # check if program is available
trim() { head -n $height | cut -c -$width; } # trim output to preview window

# clears preview img area
clearimg() {
	echo -e "6;$((max_w+offset_w));$offset_h;$((max_w+2));$((max_h+2))\n3;" | /usr/lib/w3m/w3mimgdisplay
}

# displays images at guestimated coordinates
displayimg() {
	read img_width img_height <<< $(echo "5;$1" | /usr/lib/w3m/w3mimgdisplay)

	if [ "$img_width" -gt "$max_w" ]; then
		img_height=$((img_height * max_w/img_width))
		img_width=$max_w
	fi
	if [ "$img_height" -gt "$max_h" ]; then
		img_width=$((img_width * max_h/img_height))
		img_height=$max_h
	fi
	echo -e "0;1;$((max_w+offset_w));$offset_h;$img_width;$img_height;;;;;$1\n4;\n3;" | /usr/lib/w3m/w3mimgdisplay
}

clearimg # clear any img

# Image previews
# no explicit checking for programs here, 
# as we want to notify the user about a missing utility
case "$mimetype" in
	# Image previews for SVG files, disabled by default.
	image/svg+xml)
		convert "$1" "$cached" && displayimg "$cached"
		exit;;
	# Image previews for PDF files
	application/pdf)
		pdftoppm -jpeg -singlefile "$1" "${cached//.jpg}" && displayimg "$cached".jpg
		exit;;
	image/*)
		displayimg "$1"
		exit;;
	# Image preview for video, disabled by default.:
	video/* | */x-shockwave-flash)
		ffmpegthumbnailer -i "$1" -o "$cached" -s 0 && displayimg "$cached"
		exit;;
esac

case "$extension" in
    # Archive extensions:
    a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
    rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
        has unzip  && unzip -l "$1"|trim && exit
        has als    && als "$1"|trim && exit
        has acat   && acat "$1"|trim && exit
        has bsdtar && bsdtar -lf "$1"|trim && exit
		;;
    rar)
        # avoid password prompt by providing empty password
        has unrar && unrar -p- l "$1"|trim && exit;;
    7z)
        # avoid password prompt by providing empty password
        has 7z && 7z -p l "$1"|trim && exit;;
    # PDF documents:
    pdf)
        has pdftotext && pdftotext -l 10 -nopgbrk -q "$1" -|trim && exit;;
    # BitTorrent Files
    torrent)
        has transmission-show && transmission-show "$1"|trim && exit;;
    # ODT Files
    odt|ods|odp|sxw)
        has odt2txt && odt2txt "$1"|trim && exit;;
    # HTML Pages:
    htm|html|xhtml)
        has w3m    && w3m -dump "$1"|trim && exit
        has lynx   && lynx -dump "$1"|trim && exit
        has elinks && elinks -dump "$1"|trim && exit
		;;
esac

case "$mimetype" in
    # Syntax highlight for text files:
    text/* | */xml)
        has cat && cat "$1"|trim && exit;;
    # Ascii-previews of images:
    image/*)
        has img2txt && img2txt --gamma=0.6 --width="$width" "$1"|trim && exit;;
    # Display information about media files:
    video/* | audio/*)
        has exiftool  && exiftool "$1"|trim && exit
        has mediainfo && mediainfo "$1"|trim && exit
		;;
	inode/directory)
		has tree && tree "$1"|trim && exit
		has ls && ls -l "$1"|trim && exit
		;;
esac

printf "type:\t\t$mimetype\nextension:\t$extension\n\nno preview configured"
